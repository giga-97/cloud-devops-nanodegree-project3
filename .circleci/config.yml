## Giga
version: 2.1

commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: on_fail
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color
          when: on_fail
          
  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -H "token: ca152798-fc6a-4e03-ba92-79dc7decc1e0" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm i
              npm run migrations:revert
            fi
          when: on_fail
          
orbs: 
  slack: circleci/slack@4.5.0
  aws-cli: circleci/aws-cli@1.3.0
  
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Compile the code
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Compile the code
          command: |
            cd backend
            npm run build
            cp .env dist/.env
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist
            - project/backend/node_modules
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Test the code
          command: |
            cd frontend
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Test the code
          command: |
            cd backend
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Analyze the code
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Analyze the code
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      
  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: ca152798-fc6a-4e03-ba92-79dc7decc1e0" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL
      - restore_cache:
          keys: [backend-build]
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      # - slack/notify:
      #    event: fail
      #    template: basic_fail_1
      # - slack/notify:
      #   event: pass
      #    template: success_tagged_deploy_1

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:d1:70:ec:6c:24:80:7f:8a:cd:30:c3:7a:93:69:3f"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansible.
          command: |
            apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            apk add openssh-client
            apk add --update tar gzip ansible nodejs npm curl && \
            pip install awscli
      - run:
          name: Configure server
          command: |            
            ls -ltr
            cd .circleci/ansible && \
            ls -ltr && \
            cat inventory.txt && \
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      # - slack/notify:
      #    event: fail
      #    template: basic_fail_1
      # - slack/notify:
      #   event: pass
      #    template: success_tagged_deploy_1

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations > migrations.txt
            npm audit fix
            cat migrations.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations.txt
            then
              echo "DB migration was successful, will update memstash..."
              curl -H "Content-Type: text/plain" -H "token: ca152798-fc6a-4e03-ba92-79dc7decc1e0" --request PUT --data "1" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: ca152798-fc6a-4e03-ba92-79dc7decc1e0" --request PUT --data "0" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "MigrationID=${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure    
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export API_URL=$(curl -H "token: ca152798-fc6a-4e03-ba92-79dc7decc1e0" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo "NODE_ENV=production" >> frontend/.env
            echo "API_URL=${API_URL}" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm i
            npm run build
            ls -l
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:d1:70:ec:6c:24:80:7f:8a:cd:30:c3:7a:93:69:3f"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl openssh-client
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            tar -C backend -czvf backend_artifact.tar.gz . && \
            cd .circleci/ansible && \
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              curl \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/*
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_URL=$(curl -H "token: ca152798-fc6a-4e03-ba92-79dc7decc1e0" --request GET https://api.memstash.io/values/BACKEND_URL)
            API_URL="${BACKEND_URL}/api/status"
            echo "${API_URL}"
            curl "${API_URL}"
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s  "http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com" | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: get old workflow for clean
          command: |
            WorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: ca152798-fc6a-4e03-ba92-79dc7decc1e0" --request PUT --data "$WorkflowID" https://api.memstash.io/values/WorkflowID
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=circleci-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-cloudfrontstack" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(curl -H "token: ca152798-fc6a-4e03-ba92-79dc7decc1e0" --request GET https://api.memstash.io/values/WorkflowID)
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            if [[ $OldWorkflowID == "" ]]
            then
            echo "No workflow id found"
            else
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            fi
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend         
      - scan-backend:
          requires:
            - build-backend
      - create-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires:
            - create-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-frontend
            - deploy-backend
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
